@PointClass base(BaseEntityAnimating, SRCIndicator) 
	appliesto(P2) 
	autovis(Test Elements, Dis. Beam, Laser Catcher)
	studioprop() = prop_laser_catcher: "Discouragement Beam Catcher that detects a laser, absorbing the beam. The entity will fire outputs when struck and unstruck."
	[
	skintype[engine](boolean) : "Skin Type" : 0
	skintype(choices) : "Skin Type" : 0 : "Set the type of catcher to use." =
		[
		0: "Clean"
		1: "Rusted"
		]

	skin[engine](integer) : "Skin" : 0
	skin(choices) : "[H] Skin Type" : 0 : "The skin to show in Hammer." =
		[
		0: "Clean  - Off"
		1: "Clean  - On"
		2: "Rusted - Off"
		3: "Rusted - On"
		]

	model[engine](studio): "Laser Catcher model" : "models/props/laser_catcher.mdl"
	model(choices) : "Laser Catcher Model" : "models/props/laser_catcher_center.mdl" : "Is the catcher offset? (You can also add a custom model here.)" =
		[
		"models/props/laser_catcher_center.mdl": "Centered"
		"models/props/laser_catcher.mdl": "Offset"
		]

	src_fix_skins[srctools](boolean) : "[HA] Fix Skins Logic" : 1 : "If set, add extra outputs to fix the bug with skins not changing after a reload from save."

	// Inputs
	input Skin(integer) : "Set the skin of the catcher manually."

	// Outputs
	output OnPowered(void) : "Fired when a laser hits the target."
	output OnUnpowered(void) : "Fired when a laser has stopped hitting the target."

	@resources
		[
		particle "laser_relay_powered"
		sound "prop_laser_catcher.powerloop"
		sound "prop_laser_catcher.poweroff"
		sound "prop_laser_catcher.poweron"
		]
	]
