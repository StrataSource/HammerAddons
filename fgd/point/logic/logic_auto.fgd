// If 'Remove on Fire' is unchecked, this behaves like any normal entity.
@PointClass
	base(BaseEntityPoint)
	iconsprite("editor/logic_auto.vmt") 
	color(0 100 250) 
= logic_auto: "Fires outputs when a map spawns. If 'Remove on fire' flag is set the logic_auto is deleted after firing. " +
	"It can be set to check a global state before firing. " +
	"This allows you to only fire events based on what took place in a previous map."
	[
	spawnflags(flags)  =
		[
		1: "Remove on fire" : 1
		]

	globalstate[engine](string) : "Global State to Read"
	// If no better game-specific tag is enabled.
	globalstate(choices) : "Global State to Read" : : "If set, this specifies a global state to check before firing. The OnMapSpawn output will only fire if the global state is set." =
		[
		"": "--- None ---"
		"is_console": "Game is running on a console"
		"is_pc": "Game is running on a PC"
		]
	globalstate[Hl2, EP1, EP2](choices) : "Global State to Read" : : "If set, this specifies a global state to check before firing. The OnMapSpawn output will only fire if the global state is set." =
		[
		"": "--- None ---"
		"is_console": "Game is running on a console"
		"is_pc": "Game is running on a PC"
		
		"gordon_precriminal": "Gordon pre-criminal"
		"antlion_allied": "Antlions are player allies"
		"suit_no_sprint": "Suit sprint function not yet enabled"
		"super_phys_gun": "Super phys gun is enabled"
		"friendly_encounter": "Friendly encounter sequence (lower weapons, etc.)"
		"gordon_invulnerable": "Gordon is invulnerable"
		"no_seagulls_on_jeep": "Don't spawn seagulls on the jeep"
		"is_console": "Game is running on a console"
		]

	globalstate[P2, -INFRA](choices) : "Global State to Read" =
		[
		"": "--- None ---"
		"is_console": "Game is running on a console"
		"is_pc": "Game is running on a PC"
		
		"no_pinging_blue": "Prevent Pinging ATLAS"
		"no_pinging_orange": "Prevent Pinging P-Body"
		"no_taunting_blue": "Prevent Taunting ATLAS"
		"no_taunting_orange": "Prevent Taunting P-Body"
		]

	globalstate[INFRA](choices): "Global State to Read" : : "" = 
		[
		"": "--- None ---"
		"is_console": "Game is running on a console"
		"is_pc": "Game is running on a PC"

		"infra_waterflow_reserve1": "INFRA: Reserve1 water flow meter turned on"
		"infra_waterflow_reserve2": "INFRA: Reserve2 water flow meter turned on"
		"infra_waterflow_tunnel1": "INFRA: Tunnel1 water flow meter turned on"
		"infra_waterflow_tunnel3": "INFRA: Tunnel3 water flow meter turned on"
		"infra_waterflow_tunnel4": "INFRA: Tunnel4 water flow meter turned on"
		"infra_pumping_station_polluted": "INFRA: Tunnel2 water supply is polluted"
		"infra_pumping_station_repaired": "INFRA: Tunnel2 water supply is repaired"
		"infra_pumping_station_stopped": "INFRA: Tunnel2 water supply is stopped"
		"infra_watertreatment_repaired": "INFRA: Watertreatment is repaired"
		"infra_player_no_creditcard": "INFRA: player lost his creditcard"
		"infra_player_osmo_called": "INFRA: player called osmo-olut customer service"
		"infra_player_dock_called": "INFRA: player called dock guy"
		"infra_reserve1_dam_picture_taken": "INFRA: player took picture of the dam"
		"infra_reserve2_stash": "INFRA: player took stash keys"
		"infra_sewer_fixed": "INFRA: player solved sewer issues"
		"infra_tunnel_elevator_picture_taken": "INFRA: player took picture of the elevator"
		"infra_tunnel_cracks_picture_taken": "INFRA: player took picture of the cracks"
		"infra_reserve2_power": "INFRA: player connected HW dam to the grid"
		"infra_skyscraper_sledgehammer": "INFRA: player has sledgehammer"
		"infra_watertreatment_steam_picture_taken": "INFRA: player took picture of the steam pipe"
		"infra_servicetunnel_HW_dam_connected": "INFRA: player fully connected bunker to the grid"
		"infra_stormdrain_contamination": "INFRA: player contaminated water supply"
		"infra_waterplant_fixed_all": "INFRA: waterplant fixed"
		"infra_waterplant_fixed_sewer": "INFRA: waterplant sewer fixed"
		"infra_waterplant_default": "INFRA: waterplant default"
		"infra_waterplant_mistake": "INFRA: waterplant polluted"
		"infra_waterplant_stopped": "INFRA: waterplant flow stopped"
		"infra_player_coins": "INFRA: player coin counter"
		"infra_player_bills": "INFRA: player bill counter"
		"infra_player_bank_account": "INFRA: player bank account counter"
		"infra_player_credit_card": "INFRA: player doesn't have a credit card"
		"infra_service_tram_speed_1": "INFRA: service tram speed is low"
		"infra_service_tram_speed_2": "INFRA: service tram speed is med"
		"infra_service_tram_speed_3": "INFRA: service tram speed is high"
		"infra_service_lights_1": "INFRA: service light 1 is on"
		"infra_service_lights_2": "INFRA: service light 2 is on"
		"infra_service_lights_3": "INFRA: service light 3 is on"
		"infra_residential_collapse1_picture_taken": "INFRA: player took picture of the collapse"
		"infra_residential_collapse2_picture_taken": "INFRA: player took picture of the collapse"
		"infra_duck": "INFRA: player found duck"
		"infra_internets_usb": "INFRA: player took usb"
		"infra_passport_fake": "INFRA: player has fake passport"
		"infra_passport_real": "INFRA: player has real passport"
		"infra_saved_robin": "INFRA: player saved Robin"
		"infra_promise_help_rob": "INFRA: player promised to help Rob"
		"infra_talked_rob": "INFRA: player talked Rob"
		"infra_helped_rob": "INFRA: player helped Rob"
		"infra_beer_master": "INFRA: player is beer master"
		"infra_mushroom_medicine": "INFRA: player found mushroom medicine"
		"infra_dock_drink": "INFRA: player drank mushroom tea"
		"infra_reactor_code": "INFRA: player has reactor code"
		"infra_SNW_list": "INFRA: player has SNW list"
		"infra_isle2_generators": "INFRA: player activated generators on isle2"
		"infra_battery_store_robbed": "INFRA: player robbed battery shop"
		"infra_cancer": "INFRA: player has cancer"
		"infra_wasteland": "INFRA: player comes from wasteland"
		"infra_to_isle3": "INFRA: player moves to isle3 from business"
		"infra_to_business": "INFRA: player moves to business from isle3"
		"infra_carla": "INFRA: player heard discussion between Carla and Amit"
		"infra_reactor_good_ending": "INFRA: good ending"
		"infra_reactor_bad_ending": "INFRA: bad ending"
		"infra_reactor_meltdown_ending": "INFRA: meltdown ending"
		"infra_office_flood": "INFRA: player took picture of the office flood"
		"infra_B2_Keys": "INFRA: player has B2 Keys"
		]


	// Outputs
	output OnMapSpawn(void) : "Fired when the map is loaded for any reason."
	output OnNewGame(void) : "Fired when the map is loaded to start a new game."
	output OnLoadGame(void) : "Fired when the map is loaded from a saved game."
	output OnMapTransition(void) : "Fired when the map is loaded due to a level transition."
	output OnBackgroundMap(void) : "Fired when the map is loaded as a background to the main menu."
	output OnMultiNewMap(void) : "Fired only in multiplayer, when a new map is loaded."
	output OnMultiNewRound(void) : "Fired only in multiplayer, when a new round is started. Only fired in multiplayer games that use round-based gameplay."
	output OnDemoMapSpawn[L4D2](void) : "Fired when the map is loaded in Demo Mode."

	@resources []
	]
