@BaseClass base(DXLevelChoice)
= RenderFields
	[
	rendermode[engine](integer) : "Render Mode" : 0
	rendermode(choices) : "Render Mode" : 0 : "Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'. \n" +
		"* Color & Texture = src*a+dest*(1-a)\n" +
		"* Glow = src*a + dest, fixed on screen for sprites\n" +
		"* Solid = Performs alphatest transparency\n" +
		"* Additive = src*a + dest\n" +
		"* Additive FF = blend between sprite nimation frames\n" +
		"* Alpha Add = src + dest*(1-a)\n" +
		"* World Space Glow = src*a + dest" = 
		[
		0: "Normal"
		1: "Color"
		2: "Texture"
		3: "Glow"
		4: "Solid"
		5: "Additive"
		//6: "Enviromental" - not drawn, used internally.
		7: "Additive Fractional Frame"
		8: "Additive Alpha"
		9: "World Space Glow"
		10: "Don't Render"
		]
	
	EFlags[engine](integer) : "EFlags" : 0
	EFlags[MBase](choices) : "EFlags" : 0 : "Special internal entity flags normally only set by the code. Be careful with this keyvalue." =
		[
		131072 : "Pretend to be in skybox (always transmits to client)"
		33554432 : "Don't block NPC LOS"
		134217728 : "No dissolve"
		268435456 : "No supercharged gravity gun ragdoll"
		1073741824 : "No gravity gun interaction at all"
		]

	rendercolor(color255) : "FX Color (R G B)" : "255 255 255" : "A color to mix with the model/sprite."
	renderamt(integer) : "FX Alpha (0 - 255)" : 255 : "Transparency amount, requires a Render Mode other than Normal. 0 is invisible, 255 is fully visible."

	// See src/public/const.h for the enum list.
	renderfx[engine](integer) : "Render FX" : 0
	renderfx(choices) : "Render FX" : 0 : "Various somewhat legacy alpha effects. Material Proxies are more customisable, but these are quick to set. Fade in/out are applied whenever the FX is changed. Different entities automatically get slight offsets to avoid synchronisation." =
		[
		0: "Normal"
		// alpha + amt * sin(period)
		1: "Pulse +-16, 1.5 sec period" // π/2
		2: "Pulse +-16, 0.4 sec period" // π/8
		3: "Pulse +-64, 1.5 sec period" // π/2
		4: "Pulse +-64, 0.4 sec period" // π/8
		24: "Pulse +-255, 0.26 sec period" [TF2]
		17: "Pulse +-255, 0.26 sec period" [since_L4D]

        // sin(period) > 0?
		9: "Strobe every 0.8 sec" // π/4
		10: "Strobe every 0.2 sec" // π/16
		11: "Strobe every 0.09 sec"  // π/36
		
		// sin(period1) + sin(period2) > 0?
		12: "Slow Flicker (1.5 sec, 0.18 sec)" // π/2, π/17
		13: "Fast Flicker (0.2 sec, 0.14 sec)" // π/16, π/23

		5: "Slow Fade Out (-1 per frame)" [until_L4D]
		6: "Fast Fade Out (-4 per frame)" [until_L4D]
		7: "Slow Fade In (+1 per frame)" [until_L4D]
		8: "Fast Fade In (+4 per frame)" [until_L4D]
		
		5:  "Fade Out (4 sec)" [since_L4D]
		6:  "Fade Out (1 sec)" [since_L4D]
		7:  "Fade In (4 sec)" [since_L4D]
		8:  "Fade In (1 sec)" [since_L4D]
		
		// 0 sec fade time, only really useful in code since it
		// can set the start time.
		15: "Fade Out (instant)" [since_L4D]
		16: "Fade In (instant)" [since_L4D]

		14: "Constant Glow"
		15: "Distort" [until_L4D]
		16: "Hologram (Distort + dist fade)" [until_L4D]
		23: "Cull By Distance (TEST)" [until_L4D]
		24: "Spotlight FX" [until_L4D]
		26: "Fade Near" [until_L4D]
		
		18: "Glow Shell" [since_L4D]

		// Todo, confirm which versions have these - via Pinsplash
		17: "Scale Up" [TF2]
		18: "Glow Shell" [TF2]
		19: "Clamp Minimum Scale (sprites only)" [TF2]
		20: "Environmental Rain" [TF2]
		21: "Environmental Snow" [TF2]
		22: "Spotlight FX" [TF2]
		23: "Ragdoll (ragdolls the entity but does NOT kill it)" [TF2]
		]

	disablereceiveshadows(boolean) : "Disable Receiving Shadows" : 0

	viewhideflags[engine](integer) : "View Hide Flags" : 0
	viewhideflags[MBase](choices) : "View ID nodraw" : 0 : "This keyvalue can control whether an entity should only draw on things like monitors or mirrors, " +
		"or the opposite. The code for this is { m_iViewHideFlags & (1 << CurrentViewID()) } and supports any combination of view IDs." =
		[
		0 : "Draw normally"
		193 : "Hide in main view (player's eyes)" // VIEW_MAIN + VIEW_INTRO_CAMERA + VIEW_SHADOW_DEPTH_TEXTURE
		36 : "Hide in cameras" // VIEW_MONITOR + VIEW_INTRO_PLAYER
		24 : "Hide in mirrors/water" // VIEW_REFLECTION + VIEW_REFRACTION
		60 : "Hide in cameras and mirrors/water" // VIEW_MONITOR + VIEW_INTRO_PLAYER + VIEW_REFLECTION + VIEW_REFRACTION
		2 : "Hide in 3D skybox" // VIEW_3DSKY
		128 : "Hide projected texture shadows" // VIEW_SHADOW_DEPTH_TEXTURE
		]

	// Inputs
	input Alpha(integer) : "Set the entity's alpha (0 - 255)."
	input Color(color255) : "Set the entity's color (R G B)."

	input SetRenderMode[MBase](integer) : "Sets this entity's render mode."
	input SetRenderFX[MBase](integer) : "Sets this entity's render FX."
	input SetViewHideFlags[MBase](integer) : "Sets this entity's view ID nodraw flags (takes raw flag combination)."
	input AddEffects[MBase](integer) : "Adds an entity effect."
	input RemoveEffects[MBase](integer) : "Removes an entity effect."
	input EnableDraw[!MBase, since_P2, GMod](void) : "Draws an entity if it is not drawn."
	input DisableDraw[!MBase, since_P2, GMod](void) : "Undraws an entity if it is drawn."
	input EnableDraw[MBase](void) : "Draws an entity if it is not drawn. Equivalent to RemoveEffects > 32."
	input DisableDraw[MBase](void) : "Undraws an entity if it is drawn. Equivalent to AddEffects > 32."
	input AddEFlags[MBase](integer) : "Adds an entity flag. NOTE: Entity flags are not the spawn flags you see in Hammer. Use AddSpawnFlags to add spawnflags."
	input RemoveEFlags[MBase](integer) : "Removes an entity flag. NOTE: Entity flags are not the spawn flags you see in Hammer. Use RemoveSpawnFlags to remove spawnflags."

	// This is the closest I could get without putting this in Targetname, as most entities that use collision groups usually use render fields as well
	input SetCollisionGroup[MBase](integer) : "Sets this entity's collision group."
	]
